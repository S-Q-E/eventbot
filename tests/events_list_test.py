import unittest
from unittest.mock import MagicMock, patch
from aiogram.types import CallbackQuery, Message

from db.database import Event
from handlers.events_list import list_events


class TestEventListHandler(unittest.TestCase):

    @patch("handlers.event_list.get_db")
    @patch("handlers.event_list.CallbackQuery")
    async def test_list_events_with_events(self, mock_callback_query, mock_get_db):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ —Å–æ–±—ã—Ç–∏–π
        event_1 = Event(id=1, name="–ö–æ–Ω—Ü–µ—Ä—Ç", event_time="2024-10-23 18:00", description="–ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–∞—Ä–∫–µ", price=100,
                        max_participants=50, current_participants=10)
        event_2 = Event(id=2, name="–õ–µ–∫—Ü–∏—è", event_time="2024-10-24 14:00", description="–õ–µ–∫—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏", price=0,
                        max_participants=30, current_participants=5)

        # –ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        mock_get_db.return_value.query.return_value.all.return_value = [event_1, event_2]

        # –ú–æ–∫ CallbackQuery
        mock_callback_query.message.edit_reply_markup = MagicMock()
        mock_callback_query.message.answer = MagicMock()

        # –í—ã–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä
        await list_events(mock_callback_query)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–≤–∞–∂–¥—ã –¥–ª—è –¥–≤—É—Ö —Å–æ–±—ã—Ç–∏–π
        self.assertEqual(mock_callback_query.message.answer.call_count, 2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        expected_message_1 = (
            "üéâ <b>–ö–æ–Ω—Ü–µ—Ä—Ç</b>\n"
            "üïí <b>–î–∞—Ç–∞:</b> 23 October\n\n"
            "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–∞—Ä–∫–µ\n"
            "üí∞ <b>–¶–µ–Ω–∞</b>: 100\n"
            "üí° <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç</b>: 40"
        )
        mock_callback_query.message.answer.assert_any_call(expected_message_1, reply_markup=MagicMock(),
                                                           parse_mode="HTML")

    @patch("handlers.event_list.get_db")
    @patch("handlers.event_list.CallbackQuery")
    async def test_list_events_no_events(self, mock_callback_query, mock_get_db):
        # –ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–±—ã—Ç–∏–π
        mock_get_db.return_value.query.return_value.all.return_value = []

        # –ú–æ–∫ CallbackQuery
        mock_callback_query.message.edit_reply_markup = MagicMock()
        mock_callback_query.message.answer = MagicMock()

        # –í—ã–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä
        await list_events(mock_callback_query)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_callback_query.message.answer.assert_called_with("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")


if __name__ == '__main__':
    unittest.main()
