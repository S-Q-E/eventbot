import os
import logging
from aiogram import Bot
from aiogram.types import InputMediaPhoto
from dotenv import load_dotenv
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.orm import joinedload

from db.database import get_db, User, MVPCandidate  # –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π

load_dotenv()

GROUP_CHAT_ID = os.getenv("CHAT_ID")
ADMIN = os.getenv("ADMIN")


async def send_mvp_poll(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MediaGroup —Å —Ñ–æ—Ç–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞—ë—Ç –æ–ø—Ä–æ—Å."""
    db = next(get_db())
    try:
        candidates = (
            db.query(MVPCandidate)
            .options(joinedload(MVPCandidate.user))
            .filter(MVPCandidate.is_selected == True)
            .order_by(MVPCandidate.id.desc())  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            .limit(3)
            .all()
        )

        if len(candidates) < 3:
            logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {len(candidates)}) –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            await bot.send_message(ADMIN, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MVP-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return None, None

        media_group = []
        options = []
        user_ids = []

        for candidate in candidates:
            user = candidate.user
            if user and user.photo_file_id:
                media_group.append(InputMediaPhoto(
                    media=user.photo_file_id,
                    caption=f"{user.first_name} {user.last_name}"
                ))
                options.append(f"{user.first_name} {user.last_name}")
                user_ids.append(user.id)
            else:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {candidate.user_id} –Ω–µ –∏–º–µ–µ—Ç —Ñ–æ—Ç–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        if not media_group:
            logging.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return None, None

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MediaGroup —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        await bot.send_media_group(GROUP_CHAT_ID, media=media_group)

        # 3. –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
        poll_message = await bot.send_poll(
            GROUP_CHAT_ID,
            question="üèê –í—ã–±–µ—Ä–∏—Ç–µ MVP –Ω–µ–¥–µ–ª–∏:",
            options=options,
            is_anonymous=False
        )

        logging.info(f"–û–ø—Ä–æ—Å MVP —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ID: {poll_message.message_id})")

        return poll_message.message_id, user_ids

    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ MVP: {e}")
        return None, None
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ MVP: {e}")
        return None, None
    finally:
        db.close()


async def finish_mvp_poll(bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —Ñ–æ—Ç–æ."""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = (
            db.query(MVPCandidate)
            .filter(MVPCandidate.is_selected == True)
            .order_by(MVPCandidate.id.desc())
            .limit(3)
            .all()
        )

        if not candidates:
            logging.warning("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–∫–∞–Ω–¥–∏–¥–∞—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –≥–æ–ª–æ—Å–æ–≤)
        winner = max(candidates, key=lambda c: c.votes, default=None)

        if not winner or winner.votes == 0:
            await bot.send_message(GROUP_CHAT_ID, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        user = db.query(User).filter_by(id=winner.user_id).first()

        if user and user.photo_file_id:
            media = InputMediaPhoto(media=user.photo_file_id, caption=f"üèÜ MVP –Ω–µ–¥–µ–ª–∏: {user.first_name} {user.last_name}! üéâ")
            await bot.send_photo(GROUP_CHAT_ID, photo=user.photo_file_id, caption=media.caption)
        else:
            await bot.send_message(GROUP_CHAT_ID, f"üèÜ MVP –Ω–µ–¥–µ–ª–∏: {user.first_name} {user.last_name}! üéâ (—Ñ–æ—Ç–æ "
                                                  f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

        # –ü–æ–º–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º
        for candidate in candidates:
            candidate.is_selected = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        db.commit()

    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        db.rollback()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        db.close()
