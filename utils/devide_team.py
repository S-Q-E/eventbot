import os
import random
import logging
from datetime import datetime
from aiogram import Bot
from db.database import get_db, Registration, Event, User
from dotenv import load_dotenv

load_dotenv()
CHAT_ID = os.getenv("CHAT_ID")


async def divide_teams_for_current_event(bot: Bot):
    """
    –î–µ–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ (–∞–∫—Ç–∏–≤–Ω–æ–≥–æ) —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏.
    –ï—Å–ª–∏ event.max_participants —Ä–∞–≤–Ω–æ 14 ‚Äì –¥–µ–ª–∏–º –Ω–∞ 2 –∫–æ–º–∞–Ω–¥—ã,
    –µ—Å–ª–∏ —Ä–∞–≤–Ω–æ 21 ‚Äì –¥–µ–ª–∏–º –Ω–∞ 3 –∫–æ–º–∞–Ω–¥—ã.
    –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    """
    db = next(get_db())
    try:
        now = datetime.utcnow()
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å –∏ –µ—â—ë –Ω–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        event = (
            db.query(Event)
                .filter(Event.event_time <= now, Event.is_team_divide == False)
                .order_by(Event.event_time.desc())
                .first()
        )
        if not event:
            logging.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ –∫–æ–º–∞–Ω–¥ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if event.max_participants == 14:
            teams_count = 2
            team_emojis = ["üí™", "ü§©"]
        elif event.max_participants == 21:
            teams_count = 3
            team_emojis = ["üí™", "ü§©", "üî•"]
        else:
            # –ï—Å–ª–∏ max_participants –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äì –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 –∫–æ–º–∞–Ω–¥—ã
            teams_count = 2
            team_emojis = ["üí™", "ü§©"]

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
        registrations = db.query(Registration).filter_by(event_id=event.id).all()
        players = [reg.user for reg in registrations if reg.user is not None]
        if not players:
            await bot.send_message(chat_id=CHAT_ID, text="–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        random.shuffle(players)
        n = len(players)
        teams = [[] for _ in range(teams_count)]

        base_size = n // teams_count
        remainder = n % teams_count
        start = 0
        for i in range(teams_count):
            extra = 1 if i < remainder else 0
            teams[i] = players[start: start + base_size + extra]
            start += base_size + extra

        teams_text = ""
        for idx, team in enumerate(teams):
            emoji = team_emojis[idx] if idx < len(team_emojis) else ""
            team_names = "\n".join([f"{emoji} {player.first_name} {player.last_name or ''}".strip() for player in team])
            teams_text += f"<b>–ö–æ–º–∞–Ω–¥–∞ {idx + 1}</b> ({len(team)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤):\n{team_names}\n\n"

        message_text = (
            f"üèê <b>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∞—Ç—á–∞ ¬´{event.name}¬ª</b> üèê\n\n"
            f"{teams_text}"
            f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –∏ –æ—Ç–ª–∏—á–Ω–æ–π –∏–≥—Ä—ã! üéâ"
        )

        await bot.send_message(chat_id=CHAT_ID, text=message_text, parse_mode="HTML")

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        event.is_team_divide = True
        db.commit()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: %s", e)
    finally:
        db.close()
