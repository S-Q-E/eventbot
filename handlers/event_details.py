import urllib.parse
from aiogram import types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, Event, Registration, User
import logging

event_detail_router = Router()

@event_detail_router.callback_query(F.data.startswith("details_"))
async def event_details(callback: types.CallbackQuery):
    try:
        event_id = int(callback.data.split("_")[-1])
        db = next(get_db())
        event = db.query(Event).filter_by(id=event_id).first()

        if not event:
            await callback.message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        user_id = callback.from_user.id
        user = db.query(User).filter_by(id=user_id).first()

        if not user or not user.is_registered:
            register_button = InlineKeyboardButton(
                text="üîó –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                callback_data="start_reg"
            )
            await callback.message.edit_text(
                "‚ùó –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[register_button]])
            )
            return

        registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()

        if registration:
            action_button = InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data=f"cancel_registration_{event_id}"
            )
        else:
            action_button = InlineKeyboardButton(
                text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"join_{event_id}"
            )

        formatted_time = event.event_time.strftime("%d.%m.%Y %H:%M")

        participants = db.query(User).join(Registration, User.id == Registration.user_id) \
            .filter(Registration.event_id == event.id).all()
        participants_list = "\n".join(
            f"{user.first_name} {user.last_name}" for user in participants
        ) or "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

        event_info = (
            f"<b>üìÖ {event.name}</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description}\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {event.address}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {event.price} —Ä—É–±.\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {event.current_participants}/{event.max_participants}\n"
            f"üìã <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list} \n</b> "
        )

        # –ö–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URL
        encoded_address = urllib.parse.quote(event.address)
        yandex_maps_url = f"https://yandex.ru/maps/?text={encoded_address}"

        show_on_map = InlineKeyboardButton(
            text="üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö",
            url=yandex_maps_url
        )
        back_button = InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"back_to_event_list_{event.id}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[action_button], [show_on_map], [back_button]])

        await callback.message.edit_text(event_info, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ event_details.py: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏—è.", show_alert=True)
