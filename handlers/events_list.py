from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, Event, Registration, User

event_list_router = Router()
EVENTS_PER_PAGE = 3


@event_list_router.message(Command("events_list"))
@event_list_router.callback_query(F.data.startswith("events_page_"))
async def list_events(message_or_callback: types.Message | types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    """

    is_callback = isinstance(message_or_callback, types.CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback
    page = int(message_or_callback.data.split("events_page_")[-1])
    db = next(get_db())
    events = db.query(Event).order_by(Event.event_time.asc()).all()

    if events:
        total_pages = len(events) // EVENTS_PER_PAGE
        events_to_show = events[(page - 1) * EVENTS_PER_PAGE:page * EVENTS_PER_PAGE]

        for event in events_to_show:
            registrations = db.query(Registration).filter_by(event_id=event.id).all()
            registered_users = [
                f"{user.first_name} {user.last_name}" for reg in registrations
                if (user := db.query(User).filter_by(id=reg.user_id).first())
            ]
            registered_users_text = "\n".join(registered_users) if registered_users else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

            show_on_map = InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                callback_data=f"show_on_map_{event.id}"
            )
            join_button = InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"join_{event.id}"
            )

            markup = InlineKeyboardMarkup(inline_keyboard=[[join_button], [show_on_map]])
            await message.answer(
                f"üéâ <b>{event.name}</b>\n"
                f"üïí <b>–î–∞—Ç–∞:</b> {event.event_time.strftime('%d %B')} \n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {event.price}\n"
                f"üí° <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {event.max_participants - event.current_participants}\n\n"
                f"üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{registered_users_text}",
                reply_markup=markup,
                parse_mode="HTML"
            )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"events_page_{page - 1}")
            )
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"events_page_{page + 1}")
            )
        if pagination_buttons:
            pagination_markup = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])
            await message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", reply_markup=pagination_markup)
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")


@event_list_router.callback_query(F.data.startswith("events"))
async def list_events_callback(callback: types.CallbackQuery, page: int = 1):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã"
    """
    db = next(get_db())
    events = db.query(Event).order_by(Event.event_time.asc()).all()

    if events:
        total_pages = (len(events) + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE
        events_to_show = events[(page - 1) * EVENTS_PER_PAGE:page * EVENTS_PER_PAGE]

        for event in events_to_show:
            registrations = db.query(Registration).filter_by(event_id=event.id).all()
            registered_users = [
                f"{user.first_name} {user.last_name}" for reg in registrations
                if (user := db.query(User).filter_by(id=reg.user_id).first())
            ]
            registered_users_text = "\n".join(registered_users) if registered_users else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

            show_on_map = InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                callback_data=f"show_on_map_{event.id}"
            )
            join_button = InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"join_{event.id}"
            )

            markup = InlineKeyboardMarkup(inline_keyboard=[[join_button], [show_on_map]])
            await callback.message.answer(
                f"üéâ <b>{event.name}</b>\n"
                f"üïí <b>–î–∞—Ç–∞:</b> {event.event_time.strftime('%d %B')} \n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {event.price}\n"
                f"üí° <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {event.max_participants - event.current_participants}\n\n"
                f"üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{registered_users_text}",
                reply_markup=markup,
                parse_mode="HTML"
            )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"events_page_{page - 1}")
            )
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"events_page_{page + 1}")
            )
        if pagination_buttons:
            pagination_markup = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])
            await callback.message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", reply_markup=pagination_markup)
    else:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
