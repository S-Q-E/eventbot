from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, Event, Registration, User

event_list_router = Router()
EVENTS_PER_PAGE = 3


@event_list_router.callback_query(F.data.startswith("events_list"))
@event_list_router.callback_query(F.data.startswith("events_page_"))
async def list_events(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        page = 1

    db = next(get_db())
    events = db.query(Event).order_by(Event.event_time.asc()).all()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–±—ã—Ç–∏–π
    if not events:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return

    # –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(events) + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
    events_to_show = events[(page - 1) * EVENTS_PER_PAGE:page * EVENTS_PER_PAGE]

    # –í—ã–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    user_id = callback.from_user.id
    for event in events_to_show:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
        registration = db.query(Registration).filter_by(user_id=user_id, event_id=event.id).first()

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if registration:
            join_button = InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data=f"cancel_registration_{event.id}"
            )
        else:
            join_button = InlineKeyboardButton(
                text="‚òëÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"join_{event.id}"
            )

        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        registrations = db.query(Registration).filter_by(event_id=event.id).all()
        registered_users = [
            f"{user.first_name} {user.last_name}" for reg in registrations
            if (user := db.query(User).filter_by(id=reg.user_id).first())
        ]
        registered_users_text = "\n".join(registered_users) if registered_users else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

        show_on_map = InlineKeyboardButton(
            text="üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
            callback_data=f"show_on_map_{event.id}"
        )
        event_details = InlineKeyboardButton(
            text="üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            callback_data=f"details_{event.id}"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[[event_details], [join_button], [show_on_map]])
        await callback.message.answer(
            f"üéâ <b>{event.name}</b>\n"
            f"üïí <b>–î–∞—Ç–∞:</b> {event.event_time.strftime('%d %B')} \n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {event.price}\n"
            f"üí° <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {event.max_participants - event.current_participants}\n\n"
            f"üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{registered_users_text}",
            reply_markup=markup,
            parse_mode="HTML"
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"events_page_{page - 1}")
        )
    if page < total_pages:
        pagination_buttons.append(
            InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"events_page_{page + 1}")
        )
    pagination_markup = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])
    await callback.message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}", reply_markup=pagination_markup)


@event_list_router.callback_query(F.data.startswith("cancel_registration_"))
async def cancel_registration(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ.
    """
    event_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id
    db = next(get_db())

    # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()
    event = db.query(Event).filter_by(id=event_id).first()

    if registration:
        db.delete(registration)
        event.current_participants -= 1
        db.commit()
        await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
        await callback_query.message.answer(f"–û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å 1 –º–µ—Å—Ç–æ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.name}.")
    else:
        await callback_query.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")