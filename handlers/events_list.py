from aiogram import Router, types,F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, Event, Registration, User

event_list_router = Router()


@event_list_router.message(Command("events_list"))
@event_list_router.callback_query(F.data == 'events')
async def list_events(message_or_callback: types.Message | types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ /events_list, —Ç–∞–∫ –∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–±—ã—Ç–∏—è".
    """
    # await message_or_callback.edit_reply_markup()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(message_or_callback, types.CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback

    db = next(get_db())
    events = db.query(Event).all()

    if events:
        for event in events:
            registrations = db.query(Registration).filter_by(event_id=event.id).all()
            registered_users = []
            for registration in registrations:
                user = db.query(User).filter_by(id=registration.user_id).first()
                if user:
                    registered_users.append(f"{user.first_name} {user.last_name}")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            registered_users_text = "\n".join(
                registered_users) if registered_users else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            show_on_map = InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                callback_data=f"show_on_map_{event.id}"
            )
            join_button = InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                callback_data=f"join_{event.id}"
            )

            markup = InlineKeyboardMarkup(inline_keyboard=[[join_button], [show_on_map]])
            await message.answer(
                f"üéâ <b>{event.name}</b>\n"
                f"üïí <b>–î–∞—Ç–∞:</b> {event.event_time.strftime('%d %B')} \n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {event.price}\n"
                f"üí° <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {event.max_participants - event.current_participants}\n\n"
                f"üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{registered_users_text}",
                reply_markup=markup,
                parse_mode="HTML"
            )
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")

