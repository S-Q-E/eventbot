import os
from datetime import datetime
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.database import get_db, Event, Registration, User, Category
from utils.get_week_day import get_week_day
from dotenv import load_dotenv

load_dotenv()

ADMIN = os.getenv("ADMIN_2")

event_list_router = Router()
EVENTS_PER_PAGE = 4


@event_list_router.callback_query(F.data == "events_list")
async def show_categories(callback: types.CallbackQuery):
    db = next(get_db())
    categories = db.query(Category).order_by(Category.name).all()
    db.close()

    if not categories:
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        return

    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(
            text=cat.name,
            callback_data=f"filter_cat_{cat.id}"
        )
    builder.adjust(2)  # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await callback.message.edit_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )


@event_list_router.callback_query(F.data.startswith("filter_cat_"))
async def list_events_by_category(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –û–∂–∏–¥–∞–µ—Ç callback.data –≤–∏–¥–∞ "filter_cat_{cat_id}_{page}".
    """
    # –†–∞–∑–±–æ—Ä callback_data
    parts = callback.data.split("_")
    # parts = ["filter", "cat", "{cat_id}", "{page}"]
    try:
        cat_id = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return

    try:
        page = int(parts[3])
    except (IndexError, ValueError):
        page = 1

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    db = next(get_db())
    now = datetime.now()
    events = (
        db.query(Event)
          .filter(Event.category_id == cat_id, Event.event_time > now)
          .order_by(Event.event_time.asc())
          .all()
    )
    db.close()

    keyboard = InlineKeyboardBuilder()

    if not events:
        keyboard.button(
            text="üîô –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data="events_list")
        await callback.message.edit_text("–°–æ–±—ã—Ç–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=keyboard.as_markup())
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(events) + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE
    page = max(1, min(page, total_pages))
    start = (page - 1) * EVENTS_PER_PAGE
    slice_events = events[start:start + EVENTS_PER_PAGE]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    for event in slice_events:
        weekday = get_week_day(event.event_time)
        text = (
            f"üéâ <b>{event.name}</b>\n"
            f"üïí <b>–î–∞—Ç–∞:</b> {weekday} {event.event_time.strftime('%d %B')}\n"
        )
        btn = types.InlineKeyboardButton(
            text="üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            callback_data=f"details_{event.id}"
        )
        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[btn]]))

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ + –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª
    kb_builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 1:
        kb_builder.button(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"filter_cat_{cat_id}_{page - 1}"
        )
    if page < total_pages:
        kb_builder.button(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"filter_cat_{cat_id}_{page + 1}"
        )
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    kb_builder.button(
        text="üîô –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        callback_data="events_list"
    )
    # –†–∞–∑–º–µ—Å—Ç–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    kb_builder.adjust(3)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        reply_markup=kb_builder.as_markup()
    )


@event_list_router.callback_query(F.data.startswith("cancel_registration_"))
async def cancel_registration(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    event_id = int(callback_query.data.split("_")[-1])

    confirmation_markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"confirm_cancel_{event_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"back_to_event_list_{event_id}")
        ]
    ])

    await callback_query.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?",
        reply_markup=confirmation_markup
    )


@event_list_router.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancel_registration(callback_query: types.CallbackQuery):
    """
    –†–µ–∞–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    event_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id
    db = next(get_db())

    try:
        registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()
        event = db.query(Event).filter_by(id=event_id).first()

        if not event:
            await callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if registration:
            await callback_query.bot.send_message(
                ADMIN,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {registration.user.first_name} {registration.user.last_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.name}"
            )
            db.delete(registration)
            event.current_participants -= 1
            db.commit()

            await callback_query.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            registrations = db.query(Registration).filter_by(event_id=event_id).all()
            for reg in registrations:
                try:
                    go_to_event = InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—é ‚û°Ô∏è",
                        callback_data=f"details_{event_id}"
                    )
                    markup = InlineKeyboardMarkup(inline_keyboard=[[go_to_event]])

                    await callback_query.bot.send_message(
                        chat_id=reg.user_id,
                        text=f"‚ö†Ô∏è –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.name}! –°–ø–µ—à–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
                        reply_markup=markup
                    )
                except TelegramAPIError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reg.user_id}: {e}")

        else:
            await callback_query.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    finally:
        db.close()


@event_list_router.callback_query(F.data.startswith("back_to_event_list"))
async def back_to_event_list(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    db = next(get_db())
    event = db.query(Event).filter_by(id=event_id).first()
    date = event.event_time
    weekday = get_week_day(date)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                callback_data=f"details_{event.id}"
            )
        ]
    ])
    await callback.message.edit_text(
        f"üéâ <b>{event.name}</b>\n"
        f"üïí <b>–î–∞—Ç–∞:</b> {weekday} {event.event_time.strftime('%d %B')}\n",
        reply_markup=markup
    )

