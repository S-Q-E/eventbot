import asyncio
import logging
import os
import uuid
from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, Registration, Event, User
from yookassa import Payment, Configuration
from dotenv import load_dotenv

load_dotenv()
ADMIN = os.getenv("ADMIN_2")
ADMIN_2 = os.getenv("ADMIN_3")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_API_KEY = os.getenv("YOOKASSA_API_KEY")

if not YOOKASSA_SHOP_ID or not YOOKASSA_API_KEY:
    raise ValueError("Yookassa credentials are not set. Please check your .env file.")

Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_API_KEY

logger = logging.getLogger(__name__)
event_join_router = Router()


async def fetch_event(event_id):
    db = next(get_db())
    event = db.query(Event).filter_by(id=event_id).first()
    return event, db


@event_join_router.callback_query(F.data.startswith("join_"))
async def join_event(callback_query: types.CallbackQuery, bot: Bot):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    try:
        event_id = int(callback_query.data.split("join_")[1])
    except (IndexError, ValueError):
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è.")
        return

    user_id = callback_query.from_user.id
    event, db = await fetch_event(event_id)

    if not event:
        await callback_query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if event.current_participants >= event.max_participants:
        await callback_query.message.answer("–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        return

    existing_registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()
    if existing_registration:
        logging.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event_id}. –û–ø–ª–∞—á–µ–Ω: {existing_registration.is_paid}")
        if existing_registration.is_paid:
            await callback_query.message.answer(f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ {event.name}")
            return
        else:
            await callback_query.message.answer(f"–í—ã –Ω–∞—á–∞–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞")
            return

    if event.current_participants == event.max_participants:
        await callback_query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.")
        return

    if event.price == 0:
        try:
            new_registration = Registration(user_id=user_id, event_id=event.id, is_paid=True)
            event.current_participants += 1
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event_id}.")
            db.add(new_registration)
            db.commit()

            await callback_query.message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: <b>{event.name}</b>.\n\n"
                , reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ. {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        payment = Payment.create({
            "amount": {"value": str(event.price), "currency": "RUB"},
            "payment_method_data": {
                "type": "sbp"
            },
            "confirmation": {"type": "redirect", "return_url": "https://t.me/GuruEvent_bot/"},
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏ {event.name}",
            "metadata": {"user_id": user_id, "event_id": event_id},
        })
        confirmation_url = payment.confirmation.confirmation_url
        pay_btn = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)
        markup = InlineKeyboardMarkup(inline_keyboard=[[pay_btn]])
        await callback_query.message.answer(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>–û–ø–ª–∞—Ç–∏—Ç—å</code>, <b>–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –°–ë–ü:</b>\n",
            reply_markup=markup
        )
        await check_payment(payment.id, event_id, user_id, callback_query, bot)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_payment(payment_id, event_id, user_id, callback: types.CallbackQuery, bot: Bot):
    db = next(get_db())
    try:
        user = db.query(User).filter_by(id=user_id).first()
        intervals = [30, 60, 180, 600, 1800, 3600]
        for delay in intervals:
            payment = Payment.find_one(payment_id)
            if payment.status == "succeeded":
                event, db = await fetch_event(event_id)
                existing_registration: Registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()
                if existing_registration:
                    existing_registration.is_paid = True
                    user.user_games += 1
                else:
                    new_registration = Registration(user_id=user_id, event_id=event.id, is_paid=True)
                    db.add(new_registration)
                    event.current_participants += 1

                if user:
                    user.user_games = (user.user_games or 0) + 1

                db.commit()
                user = db.query(User).filter(User.id == user_id).first()
                receipt_info = (
                    f"üìÑ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ:\n"
                    f"üéä –°–æ–±—ã—Ç–∏–µ: {event.name}\n"
                    f"üìÜ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {event.event_time}\n"
                    f"üÜî –û–ø–ª–∞—Ç–∏–ª: {user.first_name}, {user.last_name}\n"
                    f"üí∞ –°—É–º–º–∞: {event.price} —Ä—É–±.\n"
                    f"üõ† –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment.payment_method.type}\n"
                    f"üë§ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {user.phone_number}\n"
                    f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {payment.created_at}\n"
                )
                await callback.bot.send_message(ADMIN, receipt_info)
                await callback.bot.send_message(ADMIN_2, receipt_info)
                logging.info(
                    f"–û–ø–ª–∞—Ç–∞ {payment_id} –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.name} - –æ–ø–ª–∞—Ç–∏–ª {user.first_name} {user.last_name}\n")
                await callback.message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ <b>{event.name}</b>.\n"
                                              f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                                              reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                                                InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))
                return
            elif payment.status in ["pending", "waiting_for_capture"]:
                await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
                await asyncio.sleep(delay)
            else:
                await callback.message.answer("–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
        await callback.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@event_join_router.callback_query(F.data.startswith("cancel_registration_"))
async def cancel_registration(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ.
    """
    event_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id
    with next(get_db()) as db:

        registration = db.query(Registration).filter_by(user_id=user_id, event_id=event_id).first()
        event = db.query(Event).filter_by(id=event_id).first()

        if registration:
            await callback_query.bot.send_message(ADMIN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {registration.user.first_name}"
                                                         f"{registration.user.last_name}"
                                                         f"–æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.name}")
            db.delete(registration)
            event.current_participants -= 1
            if event.current_participants < 0:
                event.current_participants = 0

            db.commit()
            await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
            db.close()
        else:
            await callback_query.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")

