import logging
import os
import time
import io
from aiogram import types, Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.orm import Session, joinedload
from db.database import User, get_db, Category
from aiogram_widgets.pagination import KeyboardPaginator
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, InputMediaPhoto, FSInputFile
from aiogram.fsm.state import State, StatesGroup

user_profile_router = Router()


@user_profile_router.callback_query(F.data.startswith("user_profile"))
async def user_profile_menu(callback: types.CallbackQuery):
    try:
        db = next(get_db())
        user_id = callback.from_user.id
        user = db.query(User).filter_by(id=user_id).first()
        user_menu_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data=f"change_username_{user_id}")],
        [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="download_avatar")],
        [InlineKeyboardButton(text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—ë —Ñ–æ—Ç–æ", callback_data="show_avatar")],
        [InlineKeyboardButton(text="‚ù§Ô∏è–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="interests")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

        await callback.message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user.first_name} {user.last_name}</b>",
                                      reply_markup=user_menu_markup)
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –≤ user_profile.py {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


class EditProfileStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_photo = State()


@user_profile_router.callback_query(F.data.startswith("change_username"))
async def set_new_username(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await state.update_data(user_id=user_id)
    await state.set_state(EditProfileStates.waiting_for_username)


@user_profile_router.message(EditProfileStates.waiting_for_username)
async def save_new_username(message: types.Message, state: FSMContext):
    print(message.text)
    markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="user_profile")]])
    try:
        with next(get_db()) as db:
            first_name, last_name = message.text.split(" ")
            data = await state.get_data()
            user_id = data["user_id"]
            user = db.query(User).filter_by(id=int(user_id)).first()
            if user:
                user.first_name = first_name
                user.last_name = last_name
                db.commit()
                await message.answer(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {user.first_name} {user.last_name}.",
                                     reply_markup=markup)
            else:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
            await state.clear()
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –≤ user_profile.py. –ö–æ–¥ –æ—à–∏–±–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
    finally:
            db.close()


@user_profile_router.callback_query(F.data == "download_avatar")
async def ask_photo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    await state.set_state(EditProfileStates.waiting_for_photo)


@user_profile_router.message(EditProfileStates.waiting_for_photo, F.photo)
async def get_photo(message: types.Message):
    photo = message.photo[-1]
    file_id = photo.file_id
    user_id = message.from_user.id
    bot = message.bot

    try:
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        file_bytes = await bot.download_file(file_path)
        file_data = io.BytesIO(file_bytes.read())

        output_dir = "user_avatars"
        os.makedirs(output_dir, exist_ok=True)
        filename = f"{user_id}_{int(time.time())}.jpeg"
        output_path = os.path.join(output_dir, filename)

        with open(output_path, "wb") as f:
            f.write(file_data.getvalue())

        db = next(get_db())
        try:
            user = db.query(User).filter_by(id=user_id).first()
            user.photo_file_path = output_path
            user.photo_file_id = file_id
            db.commit()
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="user_profile")]
            ])
            await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –ë–î: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            db.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ.")


@user_profile_router.callback_query(F.data == "show_avatar")
async def show_avatar(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    db = next(get_db())

    try:
        user = db.query(User).filter_by(id=user_id).first()

        if user and user.photo_file_path and os.path.exists(user.photo_file_path):

            photo = FSInputFile(user.photo_file_path)
            await callback.message.answer_photo(photo=photo)
        else:

            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –∞–≤–∞—Ç–∞—Ä: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∞–≤–∞—Ç–∞—Ä.")
    finally:
        db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


@user_profile_router.callback_query(F.data == "show_users_avatar")
async def show_users_avatar(callback: types.CallbackQuery):
    db: Session = next(get_db())
    try:
        users = db.query(User).all()
        users_groups = [users[i:i + 10] for i in range(0, len(users), 10)]
        for group in users_groups:
            media = []
            for user in group:
                if user.photo_file_id:
                    media.append(
                        InputMediaPhoto(media=user.photo_file_id, caption=f"{user.first_name} {user.last_name}")
                    )
                else:
                    logging.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} {user.last_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç photo_file_id.")
            if media:
                await callback.message.answer_media_group(media=media)
            else:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–æ–∫: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–æ–∫.")
    finally:
        db.close()


@user_profile_router.callback_query(F.data == "user_help")
async def help_message(callback: CallbackQuery):
    back_btn = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
    await callback.message.answer("üìù –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: \n"
                                  "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                                  "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª ‚úÖ.\n"
                                  "3. –û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –ø–æ –°–ë–ü\n"
                                  "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∂–µ–ª–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ!\n"
                                  "–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ @Kozlov_Vasily",
                                  reply_markup=markup)


from sqlalchemy.orm import joinedload

@user_profile_router.callback_query(F.data == "interests")
async def show_interest_categories(callback: types.CallbackQuery):
    # 1) –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    db = next(get_db())
    try:
        # 2) –°—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ interests
        user = (
            db.query(User)
              .options(joinedload(User.interests))
              .filter(User.id == callback.from_user.id)
              .first()
        )
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        cats = db.query(Category).order_by(Category.name).all()

        builder = InlineKeyboardBuilder()
        for c in cats:
            prefix = "‚úÖ " if c in user.interests else ""
            builder.button(
                text=f"{prefix}{c.name}",
                callback_data=f"toggleinterest_{user.id}_{c.id}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_profile")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–∫–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å)\n"
            "‚úÖ ‚Äî –ø–æ–º–µ—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:",
            reply_markup=builder.as_markup()
        )
    finally:
        db.close()
    await callback.answer()


@user_profile_router.callback_query(F.data.startswith("toggleinterest_"))
async def toggle_interest(callback: types.CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    _, user_id_str, cat_id_str = callback.data.split("_", 2)
    user_id, cat_id = int(user_id_str), int(cat_id_str)

    db = next(get_db())
    try:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º user –≤–º–µ—Å—Ç–µ —Å interests
        user = (
            db.query(User)
              .options(joinedload(User.interests))
              .filter(User.id == user_id)
              .first()
        )
        category = db.query(Category).filter(Category.id == cat_id).first()

        if not user or not category:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)

        # toggle
        if category in user.interests:
            user.interests.remove(category)
        else:
            user.interests.append(category)

        db.commit()

        db.refresh(user)

        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        cats = db.query(Category).order_by(Category.name).all()
        builder = InlineKeyboardBuilder()
        for c in cats:
            prefix = "‚úÖ " if c in user.interests else ""
            builder.button(
                text=f"{prefix}{c.name}",
                callback_data=f"toggleinterest_{user.id}_{c.id}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_profile")
        builder.adjust(2)

        await callback.answer("üîÑ –ò–Ω—Ç–µ—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ toggle_interest")
        # plain-text, –±–µ–∑ HTML
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        db.close()

USERS_PER_PAGE = 10


@user_profile_router.callback_query(F.data == "edit_user_interests")
async def cmd_edit_interests(callback: types.CallbackQuery):
    """
    –°—Ç–∞—Ä—Ç: –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É, –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        db = next(get_db())
        users = db.query(User).order_by(User.username).all()
        db.close()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º ¬´—Å—ã—Ä—ã–µ¬ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞:
        # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å dict –∏–ª–∏ InlineKeyboardButton –Ω–∞–ø—Ä—è–º—É—é
        data = [
            {"text": u.username or f"{u.first_name} {u.last_name}", "callback_data": f"edit_uinterest_{u.id}"}
            for u in users
        ]

        paginator = KeyboardPaginator(
            data,  # data
            user_profile_router,  # router
            [],  # additional_buttons
            ["‚è™", "‚¨ÖÔ∏è", "‚û°Ô∏è", "‚è©"],  # pagination_buttons
            USERS_PER_PAGE,
            (1,1)
        )

        # –®–ª—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await callback.message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:",
            reply_markup=paginator.as_markup()
        )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@user_profile_router.callback_query(F.data.startswith("edit_uinterest_"))
async def edit_user(callback: CallbackQuery):
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
        user_id = int(callback.data[len("edit_uinterest_"):])

        db = next(get_db())
        user = db.query(User).options(joinedload(User.interests)).filter(User.id == user_id).first()
        if not user:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–µ–Ω
            await callback.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            db.close()
            return
        categories = db.query(Category).order_by(Category.name).all()
        db.close()

        builder = InlineKeyboardBuilder()
        for cat in categories:
            subscribed = cat in user.interests
            builder.button(
                text=f"{'‚úÖ' if subscribed else '‚òëÔ∏è'} {cat.name}",
                callback_data=f"catchinterest_{user_id}_{cat.id}"
            )
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_list")
        builder.adjust(2)

        await callback.message.edit_text(
            f"‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã <b>{user.username or user.first_name}</b>:",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.answer()


@user_profile_router.callback_query(F.data == "back_to_user_list")
async def back_to_list(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å—Ç–∞—Ä—Ç /edit_interests.
    """
    # –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –Ω–∞ /edit_interests
    await cmd_edit_interests(callback)
    await callback.answer()


@user_profile_router.callback_query(F.data.startswith("catchinterest_"))
async def toggle_interest(callback: CallbackQuery):
    db = next(get_db())
    try:
        _, user_id_str, cat_id_str = callback.data.split("_")
        user_id, cat_id = int(user_id_str), int(cat_id_str)

        user = (
            db.query(User)
              .options(joinedload(User.interests))
              .filter(User.id == user_id)
              .first()
        )
        category = db.query(Category).get(cat_id)

        if not user or not category:
            return await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)

        if category in user.interests:
            user.interests.remove(category)
        else:
            user.interests.append(category)

        db.commit()

        # —Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, session –≤—Å—ë –µ—â—ë –∂–∏–≤–∞
        categories = db.query(Category).order_by(Category.name).all()

        builder = InlineKeyboardBuilder()
        for cat in categories:
            subscribed = cat in user.interests   # session –æ—Ç–∫—Ä—ã—Ç–∞, lazy load —Ä–∞–±–æ—Ç–∞–µ—Ç
            builder.button(
                text=f"{'‚úÖ' if subscribed else '‚òëÔ∏è'} {cat.name}",
                callback_data=f"catchinterest_{user_id}_{cat.id}"
            )
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_list")
        builder.adjust(2)

        await callback.answer("üîÑ –ò–Ω—Ç–µ—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞",)
        logging.info(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.answer()
    finally:
        db.close()
