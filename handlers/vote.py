import logging
import os
from aiogram import types, Router, F
from aiogram.types import InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from dotenv import load_dotenv
from db.database import User, Event, Registration, get_db, VotingSession
from utils.mvp_poll import announce_winner

load_dotenv()
CHAT_ID = os.getenv("CHAT_ID")

vote_router = Router()


# @vote_router.callback_query(F.data == 'start_vote')
# async def start_voting(callback: types.CallbackQuery):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å is_mvp_candidate==True,
#     –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Ñ–æ—Ç–æ (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ) –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
#     :param callback:
#     :return:
#     """
#     db = next(get_db())
#     try:
#         candidates = db.query(User).filter(User.is_mvp_candidate == True).all()
#         if not candidates:
#             await callback.message.answer("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
#         media = []
#         keyboard_builder = InlineKeyboardBuilder()
#         for candidate in candidates:
#             display_name = f"üèÜ {candidate.first_name} {candidate.last_name} ({candidate.votes})"
#             photo = candidate.photo_file_id
#             media.append(InputMediaPhoto(media=photo, caption=display_name))
#             keyboard_builder.button(
#                 text=display_name,
#                 callback_data=f"vote_{candidate.id}"
#             )
#
#         await callback.message.answer_media_group(media=media)
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
#         keyboard_builder.adjust(1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
#         await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard_builder.as_markup())
#     except Exception as e:
#         logging.info(f"–û—à–∏–±–∫–∞ –≤ start_voting {e}")
#         await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
#         db.close()
#     finally:
#         db.close()

@vote_router.poll()
async def handle_poll(poll: types.Poll):
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        voting_session = db.query(VotingSession).order_by(VotingSession.id.desc()).first()
        if not voting_session or voting_session.poll_id != poll.id:
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidates = db.query(User).filter(User.is_mvp_candidate == True).all()
        for i, option in enumerate(poll.options):
            if i < len(candidates):
                candidates[i].votes = option.voter_count
        db.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞: {e}")
        db.rollback()
    finally:
        db.close()


# @vote_router.callback_query(F.data.startswith("vote_"))
# async def handle_vote_callback(callback: types.CallbackQuery):
#     candidate_id = int(callback.data.split("_")[1])
#     db: Session = next(get_db())
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
#         candidate = db.query(User).filter(User.id == candidate_id).first()
#         if candidate:
#             candidate.votes += 1
#             db.commit()
#             candidates = db.query(User).filter(User.is_mvp_candidate == True).all()
#             keyboard_builder = InlineKeyboardBuilder()
#             for cand in candidates:
#                 display_name = f"üèÜ {cand.first_name} {cand.last_name} ({cand.votes})"
#                 keyboard_builder.button(
#                     text=display_name,
#                     callback_data=f"vote_{cand.id}"
#                 )
#             keyboard_builder.adjust(1)
#             await callback.bot.edit_message_reply_markup(chat_id=CHAT_ID,
#                                                          message_id=callback.message.message_id,
#                                                          reply_markup=keyboard_builder.as_markup())
#         else:
#             await callback.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
#         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         db.rollback()
#     finally:
#         db.close()
#
#
# @vote_router.callback_query(F.data == "end_voting")
# async def end_voting_handler(callback: types.CallbackQuery):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
#     –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.
#     """
#     winner_name, photo_id = announce_winner()
#     if winner_name and photo_id:
#         await callback.message.answer_photo(photo=photo_id,
#                                             caption=f"–ó–≤–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç\n"
#                                                     f" üèÜ{winner_name} üèÜ \n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâüéâüéâ")
#     else:
#         logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
