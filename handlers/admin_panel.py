from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session, joinedload

from db.database import get_db, User
from utils.check_admin import check_admin_rights
from utils.user_report import generate_user_report

admin_router = Router()


@admin_router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    is_admin = await check_admin_rights(callback.from_user.id)
    buttons = [
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event_button")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="all_users")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="edit_user")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞", callback_data="set_admin")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="send_to_users")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_priv_message")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞", callback_data="change_users_level")],
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="report")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users_avatar")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_user_subscriptions")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="edit_user_interests")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏", callback_data="send_logs")],
        [InlineKeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞", callback_data="admin_help")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    sec_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]])
    if is_admin:
        await callback.message.edit_text(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {callback.message.from_user.username}</b>\n",
                                         reply_markup=markup)
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.\n"
                                         "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π", reply_markup=sec_markup)


@admin_router.callback_query(F.data == "admin_help")
async def admin_help_message(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel")

        ]
    ])
    await callback.message.edit_text("<b> –°–ø—Ä–∞–≤–∫–∞ </b>\n"
                                     "üîπ <code>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è </code> - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                     "üîπ <code>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ </code> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ,"
                                     "–∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ\n"
                                     "üîπ <code>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code> - —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
                                     " –≤ –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                     "üîπ <code>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞\n"
                                     "üîπ <code>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –±–æ—Ç–∞ </code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                     "üîπ <code>–ù–µ–∑–∞—Ä–µ–≥. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–≥–¥–∞-–ª–∏–±–æ "
                                     "–∑–∞–ø—É—Å–∫–∞–≤—à–∏—Ö –±–æ—Ç–∞\n "
                                     "üîπ <code>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</code> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ "
                                     "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n", reply_markup=markup)


@admin_router.callback_query(F.data == "report")
async def send_report(callback: types.CallbackQuery):
    file_name = generate_user_report()
    report = FSInputFile(file_name)
    await callback.message.answer("–í–∞—à –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.answer_document(report)


@admin_router.callback_query(F.data == "send_logs")
async def send_logs(callback: types.CallbackQuery):
    try:
        with open("bot.log", "r") as f:
            lines = f.readlines()[-20:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            log_chunk = "".join(lines)
            await callback.message.answer(f"<pre>{log_chunk}</pre>")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")


@admin_router.callback_query(F.data == "view_user_subscriptions")
async def view_user_subscriptions(callback: types.CallbackQuery):
    db: Session = next(get_db())
    users = db.query(User).options(joinedload(User.interests)).all()
    db.close()

    messages = []
    batch = []
    max_message_length = 4000
    current_length = 0

    for user in users:
        username = user.username or f"{user.first_name} {user.last_name}"
        interests = ", ".join([cat.name for cat in user.interests]) or "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
        user_info = f"üë§ <b>{username}</b>\nüìå –ü–æ–¥–ø–∏—Å–∫–∏: {interests}\n\n"
        if current_length + len(user_info) > max_message_length:
            messages.append("".join(batch))
            batch = [user_info]
            current_length = len(user_info)
        else:
            batch.append(user_info)
            current_length += len(user_info)

    if batch:
        messages.append("".join(batch))

    for msg in messages:
        await callback.message.answer(msg)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.as_markup())
    await callback.answer()

class ChangeUserLevel(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_level_choice = State()

# 1. –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
@admin_router.callback_query(F.data == "change_users_level")
async def change_users_level_start(callback: types.CallbackQuery, state: FSMContext):
    db: Session = next(get_db())
    users = db.query(User).all()
    db.close()

    max_msg_length = 3800
    batch, messages, current_length = [], [], 0

    for user in users:
        username = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        user_info = f"üßë‚Äçüíº <b>{username}</b> | üÜî <code>{user.id}</code>\n"
        if current_length + len(user_info) > max_msg_length:
            messages.append("".join(batch))
            batch = [user_info]
            current_length = len(user_info)
        else:
            batch.append(user_info)
            current_length += len(user_info)
    if batch:
        messages.append("".join(batch))

    for msg in messages:
        await callback.message.answer(msg)

    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ), —á–µ–π —É—Ä–æ–≤–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
        )
    )
    await state.set_state(ChangeUserLevel.waiting_for_user_id)
    await callback.answer()


# 2. –ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
@admin_router.message(ChangeUserLevel.waiting_for_user_id)
async def ask_for_level(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ]
            )
        )
        return

    user_id = int(message.text)
    db: Session = next(get_db())
    user = db.query(User).filter(User.id == user_id).first()
    db.close()

    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ]
            )
        )
        return

    await state.update_data(user_id=user_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üå± –ù–æ–≤–∏—á–æ–∫", callback_data="set_level:–ù–æ–≤–∏—á–æ–∫")],
            [InlineKeyboardButton(text="üèÖ –õ—é–±–∏—Ç–µ–ª—å", callback_data="set_level:–õ—é–±–∏—Ç–µ–ª—å")],
            [InlineKeyboardButton(text="üëë –ü—Ä–æ—Ñ–∏", callback_data="set_level:–ü—Ä–æ—Ñ–∏")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="change_users_level")],
        ]
    )
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è <b>{user.first_name or ''} {user.last_name or ''}</b> (üÜî <code>{user.id}</code>):",
        reply_markup=kb
    )
    await state.set_state(ChangeUserLevel.waiting_for_level_choice)


# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
@admin_router.callback_query(ChangeUserLevel.waiting_for_level_choice, F.data.startswith("set_level:"))
async def set_user_level(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    level = callback.data.split(":", 1)[1]

    db: Session = next(get_db())
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        old_level = user.user_level or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        user.user_level = level
        db.commit()
        name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        await callback.message.answer(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ <b>{name}</b> (üÜî <code>{user.id}</code>) "
            f"—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å <b>{old_level}</b> –Ω–∞ <b>{level}</b>! üéâ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ]
            )
        )
    else:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[
                                             [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                                         ]
                                     ))
    db.close()
    await state.clear()
    await callback.answer()


# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
@admin_router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–≤–æ–¥ –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )
    await callback.answer()