import logging
from datetime import datetime
from aiogram import types, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.database import get_db, Event, Category
from handlers.delete_event import event_action_markup
from utils.get_coordinates import get_location_by_address

edit_event_router = Router()

back_btn = InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                     callback_data="delete_event_button")
markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])


class EditEventStates(StatesGroup):
    editing_name = State()
    editing_time = State()
    editing_desc = State()
    editing_participants = State()
    editing_price = State()
    editing_address = State()
    editing_max_participants = State()
    edit_category = State()


@edit_event_router.callback_query(F.data.startswith("edit_event_"))
async def edit_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split("_")[-1])
    edit_options_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{event_id}")],
            [InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_address_{event_id}")],
            [InlineKeyboardButton(text="üïí –í—Ä–µ–º—è", callback_data=f"edit_time_{event_id}")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"edit_price_{event_id}")],
            [InlineKeyboardButton(text="üèê –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"set_category_{event_id}")],
            [InlineKeyboardButton(text="üóì –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{event_id}")],
            [InlineKeyboardButton(text="‚ÜïÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"edit_participants_{event_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_delete_event_button_{event_id}")]
        ]
    )
    await callback_query.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b>:",
        reply_markup=edit_options_markup
    )


@edit_event_router.callback_query(F.data.startswith("back_to_delete_event_button_"))
async def back_to_edit_list(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    db = next(get_db())
    event = db.query(Event).filter_by(id=event_id).first()

    if not event:
        await callback.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    await callback.message.edit_text(
            f"üîπ <b>{event.name}</b>\n"
            f"{event.event_time}\n",
            reply_markup=await event_action_markup(event_id=event.id),
            parse_mode="HTML"
    )


# –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_name_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.reply(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )

    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_name)


@edit_event_router.message(EditEventStates.editing_name)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    event = db.query(Event).filter_by(id=event_id).first()
    if event:
        event.name = message.text
        db.commit()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
    else:
        await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


# –ú–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_address_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.reply(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_address)


@edit_event_router.message(EditEventStates.editing_address)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    event = db.query(Event).filter_by(id=event_id).first()
    if event:
        address = message.text
        coordinates = get_location_by_address(address)
        if not coordinates:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        else:
            event.address = message.text
            db.commit()
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
    else:
        await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


# –ú–µ–Ω—è–µ–º —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_price_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_price)


@edit_event_router.message(EditEventStates.editing_price)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.price = int(message.text)
            db.commit()
            await message.answer("‚úÖ –¶–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


@edit_event_router.callback_query(F.data.startswith("edit_participants_"))
async def edit_max_participants(callback_query: CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    with next(get_db()) as db:
        event = db.query(Event).filter(Event.id == event_id).first()
        await callback_query.message.answer(f"‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è.\n –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {event.max_participants}")
        db.close()
    await state.update_data(event_id=event_id)
    await state.set_state(EditEventStates.editing_max_participants)


@edit_event_router.message(EditEventStates.editing_max_participants)
async def edit_max_participants(message: Message, state: FSMContext):
    with next(get_db()) as db:
        data = await state.get_data()
        event_id = int(data.get("event_id"))
        try:
            event = db.query(Event).filter(Event.id == event_id).first()
            event.max_participants = message.text
            db.commit()
            await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ", reply_markup=markup)
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ edit_max_participants\n –ö–æ–¥ –æ—à–∏–±–∫–∏: {e}")
            await message.answer("‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup)
        finally:
            db.close()


# –ú–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_desc_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_desc)


@edit_event_router.message(EditEventStates.editing_desc)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.description = message.text
            db.commit()
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


# –ú–µ–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_time_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:\n"
        "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –î–î/–ú–ú/–ì–ì–ì–ì –ß–ß:–ú–ú"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_time)


@edit_event_router.message(EditEventStates.editing_time)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.event_time = datetime.strptime(message.text, '%d/%m/%Y %H:%M')

            db.commit()
            await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


@edit_event_router.callback_query(F.data.startswith("set_category_"))
async def set_event_category(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    with next(get_db()) as db:
        try:
            categories = db.query(Category).order_by(Category.name).all()
            kb = InlineKeyboardBuilder()
            for category in categories:
                kb.button(
                    text=category.name,
                    callback_data=f"setting_category_{category.id}"
                )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.as_markup())
            await state.update_data(event_id=event_id)
            await state.set_state(EditEventStates.edit_category)
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –≤ set_event_category {e}")
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        finally:
            db.close()


@edit_event_router.callback_query(EditEventStates.edit_category)
async def edit_event_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.split("_")[-1]
    data = await state.get_data()
    event_id = data.get("event_id")
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="admin_panel")
    with next(get_db()) as db:
        try:
            event = db.query(Event).filter_by(id=event_id).first()
            if not event:
                await callback.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                event.category_id = category_id
                db.commit()
                await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=kb.as_markup())
        except Exception as e:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            logging.info(f"–û—à–∏–±–∫–∞ –≤ dit_event_category {e}")
        finally:
            db.close()
