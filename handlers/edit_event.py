import logging

from aiogram import types, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from db.database import get_db, Event
from utils.get_coordinates import get_location_by_address

edit_event_router = Router()

back_btn = InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                     callback_data="delete_event_button")
markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])


class EditEventStates(StatesGroup):
    editing_name = State()
    editing_time = State()
    editing_desc = State()
    editing_participants = State()
    editing_price = State()
    editing_address = State()


@edit_event_router.callback_query(F.data.startswith("edit_event_"))
async def edit_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split("_")[-1])
    # –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_options_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{event_id}")],
            [InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_address_{event_id}")],
            [InlineKeyboardButton(text="üïí –í—Ä–µ–º—è", callback_data=f"edit_time_{event_id}")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"edit_price_{event_id}")],
            [InlineKeyboardButton(text="üóì –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{event_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_event_button")]
        ]
    )
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=edit_options_markup
    )


# –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_name_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )

    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_name)


@edit_event_router.message(EditEventStates.editing_name)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    event = db.query(Event).filter_by(id=event_id).first()
    if event:
        event.name = message.text
        db.commit()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
    else:
        await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


# –ú–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_address_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_address)


@edit_event_router.message(EditEventStates.editing_address)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    event = db.query(Event).filter_by(id=event_id).first()
    if event:
        address = message.text
        coordinates = get_location_by_address(address)
        if not coordinates:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        else:
            event.address = message.text
            db.commit()
            await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
    else:
        await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


# –ú–µ–Ω—è–µ–º —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_price_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_price)


@edit_event_router.message(EditEventStates.editing_price)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.price = int(message.text)
            db.commit()
            await message.answer("‚úÖ –¶–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


# –ú–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_desc_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_desc)


@edit_event_router.message(EditEventStates.editing_desc)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.description = message.text
            db.commit()
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


# –ú–µ–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
@edit_event_router.callback_query(F.data.startswith("edit_time_"))
async def edit_event_name(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:\n"
        "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –î–î/–ú–ú/–ì–ì–ì–ì –ß–ß:–ú–ú"
    )
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditEventStates.editing_time)


@edit_event_router.message(EditEventStates.editing_time)
async def save_new_event_name(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    event_id = data.get("event_id")

    try:
        event = db.query(Event).filter_by(id=event_id).first()
        if event:
            event.event_time = message.text
            db.commit()
            await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
        else:
            await message.answer("‚ùó –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)

        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ edit_event: {e}")


