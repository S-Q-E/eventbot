from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, User
from aiogram.filters import Command

delete_user_router = Router()


@delete_user_router.callback_query(F.data == "user_list")
async def list_registered_users(callback: types.CallbackQuery):
    db = next(get_db())
    back_btn = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_panel")
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).filter(User.is_registered == True).all()

        if not users:
            await callback.message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return


        user_info = "\n".join([f"{user.first_name} {user.last_name} (@{user.username} {user.phone_number})" for user in users])
        await callback.message.answer(text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\nüîπ {user_info}", reply_markup=markup)

    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=markup)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        db.close()
