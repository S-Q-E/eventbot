from datetime import datetime
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from db.database import get_db, Event
from utils.get_coordinates import get_location_by_address

import locale

locale.setlocale(
    category=locale.LC_ALL,
    locale="Russian"
)

create_event_router = Router()


class Form(StatesGroup):
    name = State()
    address = State()
    event_time = State()
    price = State()
    description = State()
    max_participants = State()


@create_event_router.message(Command("create_event"))
@create_event_router.callback_query(F.data == "create_event")
async def command_start(callback_query: CallbackQuery, state: FSMContext) -> None:
    await callback_query.message.edit_reply_markup()
    await state.set_state(Form.name)
    await callback_query.message.edit_text("üìå <b>–®–∞–≥ 1 –∏–∑ 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
                                           "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>:\n"
                                           "üîπ –ü—Ä–∏–º–µ—Ä: <i>–í—Å—Ç—Ä–µ—á–∞ –≤ –ø–∞—Ä–∫–µ</i>\n\n",
                                           reply_markup=None, parse_mode='HTML')


@create_event_router.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    await state.set_state(Form.address)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.reply("üìå <b>–®–∞–≥ 2 –∏–∑ 6: –î–æ–±–∞–≤–∏–º –∞–¥—Ä–µ—Å</b>\n\n"
                        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ê–¥—Ä–µ—Å</b>:\n"
                        "üîπ –í–∞–∂–Ω–æ! –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: <i>–ú–æ—Å–∫–≤–∞ —É–ª.–°–æ—á–∏–Ω—Å–∫–∞—è 4</i>\n\n"
                        )


@create_event_router.message(Form.address)
async def process_time(message: types.Message, state: FSMContext):
    address = message.text
    coordinates = get_location_by_address(address)
    if not coordinates:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(address=message.text)
    await state.set_state(Form.event_time)
    await message.reply("üìå <b>–®–∞–≥ 3 –∏–∑ 6: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è</b>\n\n"
                        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è</b>:\n"
                        "üîπ –ü—Ä–∏–º–µ—Ä: <i>21/10/2024 20:10</i>\n\n"
                        )


@create_event_router.message(Form.event_time)
async def process_participants(message: types.Message, state: FSMContext):
    try:
        event_time = datetime.strptime(message.text, '%d/%m/%Y %H:%M')
        await state.update_data(event_time=event_time)
        await state.set_state(Form.max_participants)
        await message.reply("üìå <b>–®–∞–≥ 4 –∏–∑ 6: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
                            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>:\n"
                            "üîπ –ü—Ä–∏–º–µ—Ä: <i>10</i>\n\n")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì –ß–ß:–ú–ú.")


@create_event_router.message(Form.max_participants)
async def process_desc(message: types.Message, state: FSMContext):
    try:
        max_participants = message.text
        await state.update_data(max_participants=max_participants)
        await state.set_state(Form.price)
        await message.reply("üìå <b>–®–∞–≥ 5 –∏–∑ 6: –¶–µ–Ω–∞</b>\n\n"
                            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b>:\n"
                            "üîπ –ü—Ä–∏–º–µ—Ä: <i>10</i>\n\n")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@create_event_router.message(Form.price)
async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(Form.description)
    await message.reply("üìå <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
                        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</b>:\n"
                        )


@create_event_router.message(Form.description)
async def adding_to_db(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    event_data = await state.get_data()
    db = next(get_db())
    new_event = Event(
        name=event_data['name'],
        description=event_data['description'],
        address=event_data['address'],
        event_time=event_data['event_time'],
        max_participants=int(event_data['max_participants']),
        price=int(event_data['price'])
    )
    db.add(new_event)
    db.commit()
    all_events_btn = InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="events_page_1")
    markup = InlineKeyboardMarkup(inline_keyboard=[[all_events_btn]])
    await message.reply(f"‚òëÔ∏è‚òëÔ∏è‚òëÔ∏è–ì–æ—Ç–æ–≤–æ! –°–æ–±—ã—Ç–∏–µ <b>{new_event.name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=markup)
    await state.clear()
    db.close()
