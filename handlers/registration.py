import re
from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot import logger
from db.database import get_db, User

registration_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_phone_number = State()


@registration_router.callback_query(F.data == 'start_reg')
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    """
    user_id = callback.from_user.id
    db = next(get_db())
    user = db.query(User).filter_by(id=user_id).first()
    if user:
        if user.is_registered:
            events_button = InlineKeyboardButton(text="üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data="events_list")
            user_help = InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="user_help")
            markup = InlineKeyboardMarkup(inline_keyboard=[[events_button], [user_help]])
            await callback.message.answer(f"‚ùó<b>{user.first_name}, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>", reply_markup=markup)
        else:
            await state.set_state(RegistrationStates.waiting_for_first_name)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")


@registration_router.message(RegistrationStates.waiting_for_first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
    """
    first_name, last_name = message.text.split(" ")
    await state.update_data(first_name=message.text,
                            last_name=last_name)
    request_phone_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    phone_keyboard = ReplyKeyboardMarkup(keyboard=[[request_phone_button]], resize_keyboard=True,
                                         one_time_keyboard=True)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard)
    await state.set_state(RegistrationStates.waiting_for_phone_number)


@registration_router.message(RegistrationStates.waiting_for_phone_number)
@registration_router.message(RegistrationStates.waiting_for_phone_number, F.contact)
async def process_phone_number(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    """

    if message.contact:
        phone_number = message.contact.phone_number
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        phone_number = message.text.strip()
        if not re.match(r'^\+7\d{10}$', phone_number):
            await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

    user_data = await state.get_data()
    first_name = user_data['first_name']
    last_name = user_data['last_name']

    user_id = message.from_user.id
    db = next(get_db())
    user = db.query(User).filter_by(id=user_id).first()

    try:
        if user:
            user.first_name = first_name
            user.last_name = last_name
            user.is_registered = True
            user.phone_number = phone_number
            db.commit()
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            await message.answer(f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {first_name} {last_name}!\n"
                                 f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!</b>", reply_markup=markup)
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
            await state.clear()
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex}")
    finally:
        db.close()
        await state.clear()
