import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import get_db, User

main_menu_router = Router()


@main_menu_router.message(Command("main_menu"))
async def main_menu(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
    """

    user_id = message.from_user.id
    db = next(get_db())

    try:
        user = db.query(User).filter_by(id=user_id).first()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. {e}")

        return

    events_button = InlineKeyboardButton(text="üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data="events_list")
    admin_panel = InlineKeyboardButton(text="üòé –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_panel")
    user_profile = InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")
    user_stats = InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")
    user_help = InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="user_help")

    admin_markup = InlineKeyboardMarkup(inline_keyboard=[[events_button],
                                                         [admin_panel], [user_profile], [user_stats], [user_help]])

    reg_user_markup = InlineKeyboardMarkup(inline_keyboard=[[events_button], [user_profile], [user_stats], [user_help]])
    if user:
        if user.is_admin:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name} {user.last_name}!</b>\n\n"
                                 f"‚úÖ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                 f"‚úÖ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è.\n",
                                 reply_markup=admin_markup)
        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name} {user.last_name}!</b>\n\n"
                                 f"‚úÖ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                 f"‚úÖ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è.\n",
                                 reply_markup=reg_user_markup)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name} {user.last_name}!</b>\n\n"
                             f"‚úÖ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                             f"‚úÖ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è.\n")


@main_menu_router.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
    """

    user_id = callback.from_user.id
    db = next(get_db())

    try:
        user = db.query(User).filter_by(id=user_id).first()
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.info(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}")
        return

    events_button = InlineKeyboardButton(text="üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data="events_list")
    admin_panel = InlineKeyboardButton(text="üòé –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_panel")
    user_profile = InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")
    user_stats = InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")
    user_help = InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="user_help")

    admin_markup = InlineKeyboardMarkup(inline_keyboard=[[events_button],
                                                         [admin_panel], [user_profile], [user_stats], [user_help]])

    reg_user_markup = InlineKeyboardMarkup(inline_keyboard=[[events_button], [user_profile], [user_stats], [user_help]])
    if user:
        if user.is_admin:
            await callback.message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name} {user.last_name}!</b>\n\n"
                                          f"‚úÖ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                          f"‚úÖ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è.\n",
                                          reply_markup=admin_markup)
        else:
            await callback.message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name} {user.last_name}!</b>\n\n"
                                          f"‚úÖ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                                          f"‚úÖ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è.\n",
                                          reply_markup=reg_user_markup)
    else:
        await callback.message.answer(f"{callback.message.from_user.username}\n\n"
                                      f"<b>–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b?>")


@main_menu_router.callback_query(F.data == "user_stats")
async def user_statistics(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    """
    user_id = callback.from_user.id
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä
        users = db.query(User).filter(User.user_games > 0).order_by(User.user_games.desc()).all()
        
        if not users:
            await callback.message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = db.query(User).filter_by(id=user_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-10
        stats_text = "üìä <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π:</b>\n\n"
        
        medals = ["üëë", "ü•à", "ü•â"]
        
        for i, user in enumerate(users[:10], 1):
            games_text = "–º–∞—Ç—á" if user.user_games == 1 else "–º–∞—Ç—á–µ–π"
            if i <= 3:
                stats_text += f"{medals[i-1]}{user.first_name} {user.last_name} {user.user_games} {games_text}\n"
            else:
                stats_text += f"{i}. {user.first_name} {user.last_name} {user.user_games} {games_text}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–æ–ø-10
        current_user_position = None
        for i, user in enumerate(users, 1):
            if user.id == user_id:
                current_user_position = i
                break
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç–æ–ø-10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
        if current_user_position and current_user_position > 10:
            current_user_games = current_user.user_games if current_user else 0
            games_text = "–º–∞—Ç—á" if current_user_games == 1 else "–º–∞—Ç—á–µ–π"
            stats_text += f"\n{current_user_position}. –í—ã {current_user_games} {games_text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        markup = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
        
        await callback.message.answer(stats_text, reply_markup=markup)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()
